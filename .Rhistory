summary(policies_vig$PROD_ANNEE)
# Keep useful variables and appartment buildings built in the last 2 years or condos with professional evaluation
policies_sub <- policies_vig %>%
filter((PROD_AFFECTAT == "MPF" & PROD_ANNEE >= "2020") | (PROD_AFFECTAT == "MCO" & PROD_15183 == "O")) %>%
select(MACTA_ID,
PROD_15183,
PROD_AFFECTAT,
PROD_SUPERREZ,
PROD_UMESSUPE,
PROD_SUTOOCCO,
PROD_UMESSUP2,
PROD_NBETEXSS,
PROD_SOUSOLON,
PROD_CODEPOST,
PROD_ANNEE)
policies_sub <- policies_vig %>%
filter((PROD_AFFECTAT == "MPF" & PROD_ANNEE >= "2020"))
# Keep useful variables and appartment buildings built in the last 2 years or condos with professional evaluation
policies_sub <- policies_vig %>%
filter((PROD_AFFECTAT == "MFP" & PROD_ANNEE >= "2020") | (PROD_AFFECTAT == "MCO" & PROD_15183 == "O")) %>%
select(MACTA_ID,
PROD_15183,
PROD_AFFECTAT,
PROD_SUPERREZ,
PROD_UMESSUPE,
PROD_SUTOOCCO,
PROD_UMESSUP2,
PROD_NBETEXSS,
PROD_SOUSOLON,
PROD_CODEPOST,
PROD_ANNEE)
test <- policies_vig %>% filter(PROD_AFFECTAT == "MPF")
table(policies_vig$PROD_AFFECTAT)
# Keep useful variables and appartment buildings built in the last 2 years or condos with professional evaluation
policies_sub <- policies_vig %>%
filter((PRODUIT == "MPF" & PROD_ANNEE >= "2020") | (PRODUIT == "MCO" & PROD_15183 == "O")) %>%
select(MACTA_ID,
PROD_15183,
PRODUIT,
PROD_SUPERREZ,
PROD_UMESSUPE,
PROD_SUTOOCCO,
PROD_UMESSUP2,
PROD_NBETEXSS,
PROD_SOUSOLON,
PROD_CODEPOST,
PROD_ANNEE)
table(policies_sub$PRODUIT)
getwd()
qsave(policies_sub, here("data/input/cgen_policies.qs"))
getwd()
cgen_pol <- qread(here("data/input/cgen_policies.qs"))
library(qs)
cgen_pol <- qread(here("data/input/cgen_policies.qs"))
library(here)
library(dplyr)
library(qs)
cgen_pol <- qread(here("data/input/cgen_policies.qs"))
library(extraw)
library(preprocess.ho)
library(extract.data)
library(dplyr)
library(here)
library(qs)
con <- init_con()
ext_inf_pc<- extract_policies(inforce = TRUE,
LOB= "COMM",
categ_business= "BIENS",
conversion= F,
additional_atgl = 15183,
preprocess= T)
# Keep 2 last years for appartment buildings and condos
policies_vig <- ext_inf_pc$after_preprocess$products %>%
filter(DT_VIG >= "2020-01-01", (PRODUIT == "MCO" | (PRODUIT == "MPF" & PROD_AFFECTAT %in% c("C6532", "C6542", "C6543", "C6531"))))
colnames(policies_vig)
# Keep useful variables and appartment buildings built in the last 2 years or condos with professional evaluation
policies_sub <- policies_vig %>%
filter((PRODUIT == "MPF" & PROD_ANNEE >= "2020") | (PRODUIT == "MCO" & PROD_15183 == "O")) %>%
select(MACTA_ID,
PROD_15183,
PRODUIT,
PROD_SUPERREZ,
PROD_UMESSUPE,
PROD_SUTOOCCO,
PROD_UMESSUP2,
PROD_NBETEXSS,
PROD_SOUSOLON,
PROD_CODEPOST,
PROD_ANNEE,
Building_limit)
qsave(policies_sub, here("data/input/cgen_policies.qs"))
library(here)
library(dplyr)
library(qs)
# Load data ---------------------------------------------------------------
cgen_pol <- qread(here("data/input/cgen_policies.qs"))
summary(cgen_pol$Building_limit)
View(cgen_pol)
summary(cgen_pol$PRODUIT)
table(cgen_pol$PRODUIT)
table(cgen_pol$PRODUIT, useNA = "always")
table(cgen_pol$PROD_15183)  # Eval professionnelle condo
table(cgen_pol$PROD_SUPERREZ)
summary(cgen_pol$PROD_SUPERREZ)
table(cgen_pol$PROD_UMESSUPE) # ground floor area unit
table(cgen_pol$PROD_UMESSUPE, useNA = "always") # ground floor area unit
summary(cgen_pol$PROD_SUTOOCCO)
table(cgen_pol$PROD_UMESSUP2) #
table(cgen_pol$PROD_UMESSUP2, useNA = "always") #
summary(cgen_pol$PROD_NBETEXSS)
table(cgen_pol$PROD_NBETEXSS)
table(cgen_pol$PROD_NBETEXSS, useNA = "always")
table(cgen_pol$PROD_SOUSOLON, useNA = "always")
table(cgen_pol$PROD_ANNEE)
summary(cgen_pol$PROD_ANNEE)
library(ggplot2)
cgen_pol %>%
ggplot(aes(x = PRODUIT, y = Building_limit)) +
geom_boxplot()
options(scipen = 100)
cgen_pol %>%
ggplot(aes(x = PRODUIT, y = Building_limit)) +
geom_boxplot() +
theme_bw()
cgen_pol %>%
filter(Building_limit < 30000000) %>%  # remove outlier
ggplot(aes(x = PRODUIT, y = Building_limit)) +
geom_boxplot() +
theme_bw()
cgen_pol %>%
filter(Building_limit < 5000000) %>%  # remove outlier
ggplot(aes(x = PRODUIT, y = Building_limit)) +
geom_boxplot() +
theme_bw()
# ground floor area
cgen_pol %>%
ggplot(aes(x = PROD_15183, y = Building_limit)) +
geom_point()
# ground floor area
cgen_pol %>%
ggplot(aes(x = PROD_SUPERREZ, y = Building_limit)) +
geom_point()
# ground floor area
cgen_pol %>%
filter(PROD_SUPERREZ < 100000) %>%  # remove outliers
ggplot(aes(x = PROD_SUPERREZ, y = Building_limit)) +
geom_point()
# ground floor area
cgen_pol %>%
filter(PROD_SUPERREZ < 25000) %>%  # remove outliers
ggplot(aes(x = PROD_SUPERREZ, y = Building_limit)) +
geom_point()
# ground floor area
cgen_pol %>%
filter(PROD_SUPERREZ < 25000) %>%  # remove outliers
ggplot(aes(x = PROD_SUPERREZ, y = Building_limit)) +
geom_point() +
theme_bw()
# ground floor area
# convet everything in PI
cgen_pol <- cgen_pol %>%
mutate(SUPERFICIE_UNIF = case_when(PROD_UMESSUPE == "ME" ~ PROD_SUPERREZ * 3.28084,
TRUE ~ PROD_SUPERREZ))
cgen_pol %>%
# filter(PROD_SUPERREZ < 25000) %>%  # remove outliers
ggplot(aes(x = PROD_SUPERREZ, y = Building_limit)) +
geom_point() +
theme_bw()
cgen_pol %>%
filter(PROD_SUPERREZ < 25000) %>%  # remove outliers
ggplot(aes(x = PROD_SUPERREZ, y = Building_limit)) +
geom_point() +
theme_bw()
# total occupied area
# convet everything in PI
cgen_pol <- cgen_pol %>%
mutate(OCCUPPIED_UNIF = case_when(PROD_UMESSUP2 == "ME" ~ PROD_SUTOOCCO * 3.28084,
TRUE ~ PROD_SUTOOCCO))
cgen_pol %>%
# filter(SUPERFICIE_UNIF < 25000) %>%  # remove outliers
ggplot(aes(x = SUPERFICIE_UNIF, y = Building_limit)) +
geom_point() +
theme_bw()
cgen_pol %>%
filter(SUPERFICIE_UNIF < 25000) %>%  # remove outliers
ggplot(aes(x = SUPERFICIE_UNIF, y = Building_limit)) +
geom_point() +
theme_bw()
# total occupied area
# convet everything in PI
cgen_pol <- cgen_pol %>%
mutate(OCCUPPIED_UNIF = case_when(PROD_UMESSUP2 == "ME" ~ PROD_SUTOOCCO * 3.28084,
TRUE ~ PROD_SUTOOCCO))
cgen_pol %>%
# filter(OCCUPPIED_UNIF < 25000) %>%  # remove outliers
ggplot(aes(x = OCCUPPIED_UNIF, y = Building_limit)) +
geom_point() +
theme_bw()
cgen_pol %>%
filter(OCCUPPIED_UNIF < 200000) %>%  # remove outliers
ggplot(aes(x = OCCUPPIED_UNIF, y = Building_limit)) +
geom_point() +
theme_bw()
# number of stories
cgen_pol %>%
filter(Building_limit < 5000000) %>%  # remove bigger values for better visual
ggplot(aes(x = PROD_NBETEXSS, y = Building_limit)) +
geom_boxplot() +
theme_bw()
# number of stories
cgen_pol %>%
# filter(OCCUPPIED_UNIF < 200000) %>%  # remove outliers
ggplot(aes(x = PROD_NBETEXSS, y = Building_limit)) +
geom_point() +
theme_bw()
# number of stories
cgen_pol %>%
mutate(PROD_NBETEXSS = as.factor(PROD_NBETEXSS)) %>%
filter(Building_limit < 5000000) %>%  # remove bigger values for better visual
ggplot(aes(x = PROD_NBETEXSS, y = Building_limit)) +
geom_boxplot() +
theme_bw()
# basement
cgen_pol %>%
filter(Building_limit < 5000000) %>%  # remove bigger values for better visual
ggplot(aes(x = PROD_SOUSOLON, y = Building_limit)) +
geom_boxplot() +
theme_bw()
View(cgen_pol)
# year
cgen_pol %>%
# filter(SUPERFICIE_UNIF < 25000) %>%  # remove outliers
ggplot(aes(x = PROD_ANNEE, y = Building_limit)) +
geom_point() +
theme_bw()
View(cgen_pol)
0.3*1386
# Define the partition (75% of the data for training)
trainIndex <- createDataPartition(cgen_pol$Building_limit, p = .75,
list = FALSE,
times = 1)
library(caret)
# Define the partition (75% of the data for training)
trainIndex <- createDataPartition(cgen_pol$Building_limit, p = .75,
list = FALSE,
times = 1)
# Split the dataset using the defined partition
train_data <- cgen_pol[trainIndex, ,drop=FALSE]
tune_plus_val_data <- cgen_pol[-trainIndex, ,drop=FALSE]
# Define a new partition to split the remaining 25%
tune_plus_val_index <- createDataPartition(tune_plus_val_data$Building_limit,
p = .6,
list = FALSE,
times = 1)
# Split the remaining ~25% of the data: 40% (tune) and 60% (val)
tune_data <- tune_plus_val_data[-tune_plus_val_index, ,drop=FALSE]
val_data <- tune_plus_val_data[tune_plus_val_index, ,drop=FALSE]
# Linear Regression
mod <- glm(Building_limit ~ PRODUIT + SUPERFICIE_UNIF + OCCUPIED_UNIF + PROD_NBETEXSS + PROD_SOUSOLON, data = train_data)
# Linear Regression
mod <- glm(Building_limit ~ PRODUIT + SUPERFICIE_UNIF + OCCUPPIED_UNIF + PROD_NBETEXSS + PROD_SOUSOLON, data = train_data)
mod
# Linear Regression
# manque + OCCUPPIED_UNIF car bcp missings
mod <- glm(Building_limit ~ PRODUIT + SUPERFICIE_UNIF + PROD_NBETEXSS + PROD_SOUSOLON, data = train_data)
mod
summery(mod)
summary(mod)
predict(mod, tune_data)
tune_predicted <- predict(mod, tune_data)
tune_data <- tune_data %>%
mutate(pred = predict(mod, tune_data))
View(tune_data)
tune_data %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
theme_bw()
tune_data %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
geom_tile("Condos & Appartments") +
theme_bw()
tune_data %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
geom_title("Condos & Appartments") +
theme_bw()
tune_data %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Condos & Appartments") +
theme_bw()
tune_data %>%
filter(PRODUIT == "MCO") %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Condos") +
theme_bw()
tune_data %>%
filter(PRODUIT == "MPF") %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Appartments") +
theme_bw()
tune_data %>%
filter(PRODUIT == "MCO") %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Condos") +
theme_bw()
# building limit
cgen_pol %>%
ggplot(aes(x=Building_limit)) +
geom_density()
# GLM gamma
# manque + OCCUPPIED_UNIF car bcp missings
mod <- glm(Building_limit ~ PRODUIT + SUPERFICIE_UNIF + PROD_NBETEXSS + PROD_SOUSOLON, data = train_data, family = "gamma")
# GLM gamma
# manque + OCCUPPIED_UNIF car bcp missings
mod <- glm(Building_limit ~ PRODUIT + SUPERFICIE_UNIF + PROD_NBETEXSS + PROD_SOUSOLON, data = train_data, family = Gamma)
# GLM gamma
# manque + OCCUPPIED_UNIF car bcp missings
mod <- glm(Building_limit ~ PRODUIT + SUPERFICIE_UNIF + PROD_NBETEXSS + PROD_SOUSOLON, data = train_data, family = Gamma(link = "identity"))
# GLM gamma
# manque + OCCUPPIED_UNIF car bcp missings
mod <- glm(Building_limit ~ PRODUIT + SUPERFICIE_UNIF + PROD_NBETEXSS + PROD_SOUSOLON, data = train_data, family = Gamma(link = "log"))
mod <- lm(log(Building_limit) ~ PRODUIT + SUPERFICIE_UNIF + PROD_NBETEXSS + PROD_SOUSOLON, data = train_data)
summary(mod)
# Pred & eval
tune_data <- tune_data %>%
mutate(pred = predict(mod, tune_data))
tune_data %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Condos & Appartments") +
theme_bw()
# Pred & eval
tune_data <- tune_data %>%
mutate(pred = exp(predict(mod, tune_data)))
tune_data %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Condos & Appartments") +
theme_bw()
tune_data %>%
filter(PRODUIT == "MCO") %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Condos") +
theme_bw()
tune_data %>%
filter(PRODUIT == "MPF") %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Appartments") +
theme_bw()
# GLM gamma
# manque + OCCUPPIED_UNIF car bcp missings
mod <- glm(Building_limit ~ PRODUIT + SUPERFICIE_UNIF + PROD_NBETEXSS + PROD_SOUSOLON + OCCUPPIED_UNIF, data = train_data, family = Gamma(link = "identity"))
summary(mod)
cor(cgen_pol$OCCUPPIED_UNIF, cgen_pol$SUPERFICIE_UNIF)
cor(cgen_pol$OCCUPPIED_UNIF, cgen_pol$SUPERFICIE_UNIF, use = "complete.obs")
tune_data <- tune_data %>%
mutate(pred = predict(mod, tune_data))
tune_data %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Condos & Appartments") +
theme_bw()
tune_data %>%
filter(PRODUIT == "MCO") %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Condos") +
theme_bw()
tune_data %>%
filter(PRODUIT == "MPF") %>%
ggplot(aes(x = pred, y = Building_limit)) +
geom_point() +
ggtitle("Appartments") +
theme_bw()
RsqGLM(mod)
install.packages("modEva")
install.packages("modEvA")
RsqGLM(obs = tune_data$Building_limit, pred = tune_data$pred)
library(modEvA)
RsqGLM(obs = tune_data$Building_limit, pred = tune_data$pred)
RsqGLM(mod = mod, obs = tune_data$Building_limit, pred = tune_data$pred)
RsqGLM(mod = mod)
library(modEvA)
52-4-3-2
43*5
45*5
3491.93-1908.84
install.packages("boot")
library(boot)
mod.diag <- glm.diag(mod)
glm.diag.plots(mod, mod.diag)
library(extraw)
library(preprocess.ho)
library(extract.data)
library(dplyr)
library(here)
library(qs)
con <- init_con()
# Extract inforce policies
ext_inf_pc_ugen <- extract_policies(inforce = TRUE,
company = "UGEN",
LOB= "COMM",
categ_business= "BIENS",
conversion= F,
additional_atgl = 15183,
preprocess= T)
# Extract inforce policies
ext_inf_pc_ugen <- extract_policies(inforce = TRUE,
company = "UGEN",
LOB= "COMM",
categ_business= "BIENS",
conversion= F,
additional_atgl = 15183,
preprocess= T)
View(ext_inf_pc_ugen)
pol_ugen <- ext_inf_pc_ugen$after_preprocess
View(pol_ugen)
qsave(ext_inf_pc_ugen, here("data/input/extract_ugen_policies.qs"))
pol_ugen <- ext_inf_pc_ugen$after_preprocess$situations
colnames(pol_ugen)
table(pol_ugen$PDR_ACT_00140)
142/113
143/113
62/50
87/60
67/50
table(pol_ugen$PDR_ACT_00071)
table(pol_ugen$SIT_ETAGE)
cgen_pol <- qread(here("data/input/cgen_policies.qs"))
table(pol_ugen$SIT_AFFECTATION)
table(pol_ugen$categorie)
pol_ugen$SIT_CONTENU_SOUS_SOL
library(extraw)
library(preprocess.ho)
library(extract.data)
library(dplyr)
library(here)
library(qs)
con <- init_con()
# CGEN --------------------------------------------------------------------
# Extract inforce policies
ext_inf_pc<- extract_policies(inforce = TRUE,
LOB= "COMM",
categ_business= "BIENS",
conversion= F,
additional_atgl = c(15183, 14356),
preprocess= T)
# Keep 2 last years for appartment buildings and condos
policies_vig <- ext_inf_pc$after_preprocess$products %>%
filter(DT_VIG >= "2020-01-01", (PRODUIT == "MCO" | (PRODUIT == "MPF" & PROD_AFFECTAT %in% c("C6532", "C6542", "C6543", "C6531"))))
system(command ="net group /domain APP-CGEN-ETL-Lecture")
res <- extraw::get_atgl("adresse")
View(res)
res <- extraw::get_atgl(14356)
View(res)
res <- extraw::get_atgl("adresse")
View(res)
library(extraw)
library(preprocess.ho)
library(extract.data)
library(dplyr)
library(here)
library(qs)
con <- init_con()
# CGEN --------------------------------------------------------------------
# Extract inforce policies
ext_inf_pc<- extract_policies(inforce = TRUE,
LOB= "COMM",
categ_business= "BIENS",
conversion= F,
additional_atgl = c(15183, 14356, 165, 8607),
preprocess= T)
# Keep 2 last years for appartment buildings and condos
policies_vig <- ext_inf_pc$after_preprocess$products %>%
filter(DT_VIG >= "2020-01-01", (PRODUIT == "MCO" | (PRODUIT == "MPF" & PROD_AFFECTAT %in% c("C6532", "C6542", "C6543", "C6531"))))
colnames(policies_vig)
tets <- policies_vig %>%
select(PROD_ADRESSE1)
View(tets)
# Extract inforce policies
ext_inf_pc<- extract_policies(inforce = TRUE,
LOB= "COMM",
categ_business= "BIENS",
conversion= F,
additional_atgl = c(15183, 14356, 165),
preprocess= T)
View(res)
test <- policies_vig[1:10,]
test <- policies_vig[, 1:10]
test <- policies_vig[1:10,]
View(test)
con <- init_con()
# CGEN --------------------------------------------------------------------
# Extract inforce policies
ext_inf_pc<- extract_policies(inforce = TRUE,
LOB= "COMM",
categ_business= "BIENS",
conversion= F,
additional_atgl = c(15183, 14356, 70, 71, 165, 169, 170),
preprocess= T)
7572+299
# Keep 2 last years for appartment buildings and condos
policies_vig <- ext_inf_pc$after_preprocess$products %>%
filter(DT_VIG >= "2020-01-01", (PRODUIT == "MCO" | (PRODUIT == "MPF" & PROD_AFFECTAT %in% c("C6532", "C6542", "C6543", "C6531"))))
colnames(policies_vig)
